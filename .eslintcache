[{"/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/index.js":"1","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/reportWebVitals.js":"2","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/App.js":"3","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/listView.js":"4","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/ListView.js":"5","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/PublishBtn.js":"6","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/BottomNav.js":"7","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/TopBar.js":"8","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/ListChannels.js":"9"},{"size":500,"mtime":1607358812757,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1607358812757,"results":"12","hashOfConfig":"11"},{"size":394,"mtime":1613653916423,"results":"13","hashOfConfig":"11"},{"size":427,"mtime":1608048497823,"results":"14","hashOfConfig":"11"},{"size":7041,"mtime":1613659093699,"results":"15","hashOfConfig":"11"},{"size":3701,"mtime":1613653947710,"results":"16","hashOfConfig":"11"},{"size":3720,"mtime":1613638230533,"results":"17","hashOfConfig":"11"},{"size":867,"mtime":1613212112858,"results":"18","hashOfConfig":"11"},{"size":636,"mtime":1613654307135,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"zs5iqd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/index.js",[],["44","45"],"/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/reportWebVitals.js",[],"/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/App.js",["46"],"import React from 'react';\nimport ListView from './components/ListView';\nimport PublishBtn from './components/PublishBtn';\nimport BottomNav from './components/BottomNav';\nimport TopBar from './components/TopBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Messaging App</h1>\n      <TopBar />\n      <BottomNav />\n      <PublishBtn />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/listView.js",["47"],"/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/ListView.js",["48","49","50"],"import React from 'react';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport {IoChevronUpOutline, IoChevronDownOutline, IoEllipsisHorizontal, IoLocationSharp} from 'react-icons/io5';\n\nfunction ListView() {\n    // Array of messages of a selected Channel\n    const [messages, setMessages] = useState([]);\n    // Array of channels\n    const [channels, setChannels] = useState([]);\n    // Holds the current selected Channel, by default \"@Main\"\n    const [selectedChannel, setSelectedChannel] = useState('@Main');\n    const [selChannelId, setChanId] = useState(1);\n    const [likes, setLikes] = useState(0);\n    // Options panel for message\n    const [options, setOptions] = useState(false);\n    const [id, setId] = useState(0);\n\n    async function fetchMessages() {\n        const response = await fetch('http://localhost:8080/channelbyname/'+selectedChannel);\n        const json = await response.json();\n        setMessages(json.messages);\n        setSelectedChannel(json.channelName);\n        setChanId(json.channelId);\n    }\n    \n    async function fetchChannels() {\n        const response = await fetch('http://localhost:8080/channels');\n        const json = await response.json();\n        setChannels(json);\n    } \n\n    const postDelete = (msgId) => {\n        console.log(\"Deleting message (ID) \" + id);\n        axios.delete(\"http://localhost:8080/message/delete/\"+id)\n            .then(res => {\n                console.log(res.data);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n   /* const handleUpvote = (msgId) => {\n        console.log(\"Upvoted message (ID) \" + id);\n        axios.put(\"http://localhost:8080/upvote/\" + id, {messageId: id})\n        .then(res => {\n            console.log(res.data);\n        })\n        .catch((err) => {\n            console.log(err);\n        })\n    } */\n\n    const handleOptionsOpen = (id) => {\n        setOptions(true);\n        console.log(\"Options for message with ID: \" + id);\n        setId(id);\n    }\n    const handleOptionsClose = () => {\n        setOptions(false);\n    }\n\n    const onChannelChange = (e) => {\n        setSelectedChannel(e.target.value);\n    }\n\n    const onUpvote = (id, text, color, ht, loc, likes) => {\n        const msgData = {\n            messageId: id,\n            messageText: text,\n            messageColor: color,\n            messageHashtag: ht,\n            messageLocation: loc,\n            messageLikes: likes+1,\n            messageChannel: {\n                channelId: selChannelId\n            }\n        } \n        axios.put('http://localhost:8080/upvote', msgData)\n        .then(response => {\n            if (response.status === 200) {\n                console.log(\"upvoted message \" + id);\n            } else {\n                console.log(\"Upvote failed\");\n            }\n        })\n        window.location.reload(false);\n    }\n\n    useEffect(() => {fetchMessages()}, [selectedChannel]);\n    useEffect(() => {fetchChannels()}, []);\n\n    console.log(channels);\n    console.log(messages);\n    console.log(\"Channel chosen: \" + selectedChannel);\n    \n    if (options === true) {\n        return(\n            <div style={{display: 'flex', flexDirection: 'column', backgroundColor: 'orange', alignItems: 'center'}}>\n                <h1>Message settings</h1>\n                <p>MessageID: {id}</p>\n                <div className='op_btns' style={{display: 'flex', flexDirection: 'column', width: 200, alignItems: 'center', margin: 20}}>\n                    <button style={{display: 'flex', height: 40, width: 150, fontSize: 24}} onClick={postDelete}>Delete</button>\n                    <button style={{display: 'flex', height: 40, width: 150, fontSize: 24}}>Share</button>\n                    <button style={{display: 'flex', height: 40, width: 150, fontSize: 24}}>Save</button>\n                    <button style={{display: 'flex', height: 40, width: 150, fontSize: 24}} onClick={handleOptionsClose}>Close</button>\n                </div>\n            </div>\n        )\n    }\n\n    return(\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n            <div style={{display: 'flex', backgroundColor: 'grey', alignItems: 'center', justifyContent: 'center', padding: 10}}>\n                <div style={{display: 'flex', marginRight: 20}}>\n                    <h1>Channel: </h1>\n                </div>\n                <select onChange={onChannelChange} style={{width: 200, height: 50, fontSize: 24}}>\n                    {channels.map(chan =>\n                       <option \n                       key={chan.channelId} \n                       value={chan.channelName}\n                       >{chan.channelName}</option> \n                    )}\n                </select>\n            </div>\n            {\n            messages.map((msg) => (\n            <div key={msg.messageId} style={{backgroundColor: msg.messageColor}}>\n            <div id='jodelContainer' style={{margin: 10}}>\n                <div id='topBar' style={{display: 'flex', flexDirection: 'row'}}>\n                    <IoLocationSharp style={{color: \"#fff\", fontSize: 20, marginTop: 10, opacity: 0.7}}/>\n                    <p style={{color: \"#fff\", fontSize: 14, marginTop: 10, marginRight: 15, opacity: 0.7}}>{msg.messageLocation}</p>\n                    <p style={{color: \"#fff\", fontSize: 14, marginRight: 10}}><b>{selectedChannel}</b></p>\n                    <p style={{color: \"#fff\", fontSize: 14, opacity: 0.7}}>0s</p>\n                </div>\n                <div id='jodling' style={{display: 'flex'}}>\n                    <div id='textContent' style={{flex: 10}}>\n                        <p style={{color: \"#fff\", fontSize: 18}}>{msg.messageText}</p>\n                        <br />\n                        <p style={{color: \"#fff\", fontSize: 18}}><b>{msg.messageHashtag}</b></p>\n                        <p>{msg.messageId}</p>\n                    </div>\n                    <div id='rightControls' style={{flex: 1}}>\n                        <div id='likes' style={{display: 'flex', flexDirection: 'column'}}>\n                            <IoChevronUpOutline style={{color: \"#fff\", fontSize: 25}} />\n                            <button \n                            onClick={() => \n                            onUpvote(msg.messageId, msg.messageText, msg.messageColor, msg.messageHashtag, msg.messageLocation, msg.messageLikes)\n                            }>Testi upvote</button>\n                            <p style={{color: \"#fff\", fontSize: 25}}>{msg.messageLikes}</p>\n                            <IoChevronDownOutline style={{color: \"#fff\", fontSize: 25}}/>\n                        </div>\n                    </div>\n                </div>\n                <div id='threeDots' style={{display: 'flex'}}>\n                    <IoEllipsisHorizontal style={{color: \"#fff\", fontSize: 30, flex: 1}}\n                    onClick={() => handleOptionsOpen(msg.messageId)} id={msg.messageId}/>\n                </div>\n            </div>\n            </div>\n            ))\n            }\n        </div>\n    )\n}\n\nexport default ListView;","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/PublishBtn.js",["51","52"],"import React, { useState } from 'react';\n\nfunction PublishBtn() {\n    const [write, setWrite] = useState(false);\n    const [msgObj, setMsgObj] = useState({\n            messageText: '',\n            messageColor: 'green',\n            messageChannel:  {\n                channelName: '',\n                channelDesc: ''\n            },\n            messageHashtag: '',\n            messageLocation: 'Helsinki',\n            messageLikes: 0\n    });\n    const [channels, setChannels] = useState([]);\n    \n    const handleWrite = () => {\n        setWrite(true);\n    }\n    const handleCancel = () => {\n        setWrite(false);\n    }\n\n    const printObj = () => {\n        console.log(msgObj);\n    }\n    const changeValues = (val) => {\n        setMsgObj({\n            ...msgObj,\n            [val.target.name]: val.target.value\n        });\n    }\n\n    const clearValues = () => {\n        setMsgObj({\n            messageText: '',\n            messageColor: 'green',\n            messageChannel:  {\n                channelName: '',\n                channelDesc: ''\n            },\n            messageHashtag: '',\n            messageLocation: 'Helsinki',\n            messageLikes: 0\n        });\n    }\n\n    const postMessage = () => {\n        fetch('http://localhost:8080/publish', {\n        method: 'POST',\n        headers: {'Accept': 'application/json', 'Content-Type': 'application/json'},\n        body: JSON.stringify(msgObj)\n        });\n        console.log(\"Message posted!\");\n    }\n\n\n    /* CONDITIONAL RENDERING */\n\n    if (write === true) {\n        return(\n            <div style={{height: 400, backgroundColor: \"#f26d50\", textAlign: 'center'}}>\n                <h1>Kirjoita</h1>\n                <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>\n                    <p>Kanava:</p>\n                    <select name='messageChannel' value={msgObj.messageChannel.channelName} onChange={changeValues} style={{display: 'flex', width: 150}}>\n                        <option value='@Main'>@Main</option>\n                        <option value='@Opiskelu'>@opiskelu</option>\n                        <option value='@Menot'>@menot</option>\n                        <option value='@Ruoka'>@ruoka</option>\n                    </select>\n                    <p>Teksti:</p>\n                    <input name='messageText' value={msgObj.messageText}\n                    onChange={changeValues}\n                    style={{display: 'flex', height: 100, width: 350, fontSize: 18}}></input>\n                    <p>Hashtag:</p>\n                    <input name='messageHashtag' value={msgObj.messageHashtag} \n                    onChange={changeValues} \n                    style={{display: 'flex', width: 150}}></input>\n                </div>\n               \n                <button onClick={handleCancel}>takaisin</button>\n                <button onClick={postMessage}>Lähetä</button>\n                <button onClick={printObj}>LOG</button>\n                <button onClick={clearValues}>Tyhjennä</button>\n            </div>\n        )\n    }\n\n    return(\n           <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', opacity: 0.7}}>\n            <button \n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: 100, \n                borderRadius: 100, \n                height: 200, \n                width: 200, \n                borderWidth: 4,\n                paddingBottom: 20,\n                borderColor: 'white', \n                color: 'grey'}} \n                onClick={handleWrite}>+</button>\n            </div>\n    )\n}\n\nexport default PublishBtn;","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/BottomNav.js",["53"],"import React, { useState, useEffect } from 'react';\nimport {MdExplore, MdTrackChanges, MdPersonPin} from 'react-icons/md';\n\nimport ListView from './ListView';\nimport ListChannels from './ListChannels';\n\nfunction BottomNav() {\n    const [selection, setSelection] = useState('feed');\n\n    const handleFeed = () => {\n        setSelection('feed');\n    }\n    const handleChannels = () => {\n        setSelection('channels');\n    }\n    const handleOptions = () => {\n        setSelection('options');\n    }\n\n    if (selection === 'feed') {\n    return(\n    <div className='OuterContainer'>\n    <ListView />\n        <div className='NavContainer' style={{display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', backgroundColor: 'orange'}}>\n            <div className='Channels' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleChannels}><MdTrackChanges /></button>\n            </div>\n            <div className='Feed' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleFeed}><MdExplore /></button>\n            </div>\n            <div className='Options' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleOptions}><MdPersonPin /></button>\n            </div>\n        </div>\n    </div>\n    )\n    }\n    else if (selection === 'channels') {\n        return(\n        <div className='OuterContainer'>\n            <h1>Channels</h1>\n            <ListChannels />\n            <div className='NavContainer' style={{display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', backgroundColor: 'orange'}}>\n            <div className='Channels' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleChannels}><MdTrackChanges /></button>\n            </div>\n            <div className='Feed' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleFeed}><MdExplore /></button>\n            </div>\n            <div className='Options' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleOptions}><MdPersonPin /></button>\n            </div>\n        </div>\n    </div>\n        )\n    }\n    else if (selection === 'options') {\n        return(\n        <div className='OuterContainer'>\n            <h1>Options</h1>\n            <div className='NavContainer' style={{display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', backgroundColor: 'orange'}}>\n            <div className='Channels' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleChannels}><MdTrackChanges /></button>\n            </div>\n            <div className='Feed' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleFeed}><MdExplore /></button>\n            </div>\n            <div className='Options' style={{display: 'flex'}}>\n                <button style={{width: 150, height: 100, backgroundColor: '#fff', fontSize: 42}}\n                onClick={handleOptions}><MdPersonPin /></button>\n            </div>\n        </div>\n    </div>\n        )\n    }\n}\n\nexport default BottomNav;","/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/TopBar.js",[],"/Users/feelikskilpi/Documents/Developement/webbi-react-app/src/components/ListChannels.js",[],["54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":8,"nodeType":"62","messageId":"63","endLine":2,"endColumn":16},{"ruleId":"64","severity":1,"message":"65","line":12,"column":17,"nodeType":"66","endLine":12,"endColumn":20},{"ruleId":"60","severity":1,"message":"67","line":14,"column":12,"nodeType":"62","messageId":"63","endLine":14,"endColumn":17},{"ruleId":"60","severity":1,"message":"68","line":14,"column":19,"nodeType":"62","messageId":"63","endLine":14,"endColumn":27},{"ruleId":"69","severity":1,"message":"70","line":91,"column":40,"nodeType":"71","endLine":91,"endColumn":57,"suggestions":"72"},{"ruleId":"60","severity":1,"message":"73","line":16,"column":12,"nodeType":"62","messageId":"63","endLine":16,"endColumn":20},{"ruleId":"60","severity":1,"message":"74","line":16,"column":22,"nodeType":"62","messageId":"63","endLine":16,"endColumn":33},{"ruleId":"60","severity":1,"message":"75","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},{"ruleId":"56","replacedBy":"76"},{"ruleId":"58","replacedBy":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'ListView' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'likes' is assigned a value but never used.","'setLikes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'channels' is assigned a value but never used.","'setChannels' is assigned a value but never used.","'useEffect' is defined but never used.",["78"],["79"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [fetchMessages, selectedChannel]",{"range":"83","text":"84"},[2920,2937],"[fetchMessages, selectedChannel]"]